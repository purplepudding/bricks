// Code generated by MockGen. DO NOT EDIT.
// Source: settings/global_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source settings/global_grpc.pb.go -destination settings/mock/global_grpc.pb.go -package mocksettings
//

// Package mocksettings is a generated GoMock package.
package mocksettings

import (
	context "context"
	reflect "reflect"

	settings "github.com/purplepudding/bricks/api/pkg/pb/bricks/v1/settings"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockGlobalSettingsServiceClient is a mock of GlobalSettingsServiceClient interface.
type MockGlobalSettingsServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockGlobalSettingsServiceClientMockRecorder
	isgomock struct{}
}

// MockGlobalSettingsServiceClientMockRecorder is the mock recorder for MockGlobalSettingsServiceClient.
type MockGlobalSettingsServiceClientMockRecorder struct {
	mock *MockGlobalSettingsServiceClient
}

// NewMockGlobalSettingsServiceClient creates a new mock instance.
func NewMockGlobalSettingsServiceClient(ctrl *gomock.Controller) *MockGlobalSettingsServiceClient {
	mock := &MockGlobalSettingsServiceClient{ctrl: ctrl}
	mock.recorder = &MockGlobalSettingsServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGlobalSettingsServiceClient) EXPECT() *MockGlobalSettingsServiceClientMockRecorder {
	return m.recorder
}

// SetGlobalSettings mocks base method.
func (m *MockGlobalSettingsServiceClient) SetGlobalSettings(ctx context.Context, in *settings.SetGlobalSettingsRequest, opts ...grpc.CallOption) (*settings.SetGlobalSettingsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetGlobalSettings", varargs...)
	ret0, _ := ret[0].(*settings.SetGlobalSettingsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetGlobalSettings indicates an expected call of SetGlobalSettings.
func (mr *MockGlobalSettingsServiceClientMockRecorder) SetGlobalSettings(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGlobalSettings", reflect.TypeOf((*MockGlobalSettingsServiceClient)(nil).SetGlobalSettings), varargs...)
}

// MockGlobalSettingsServiceServer is a mock of GlobalSettingsServiceServer interface.
type MockGlobalSettingsServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockGlobalSettingsServiceServerMockRecorder
	isgomock struct{}
}

// MockGlobalSettingsServiceServerMockRecorder is the mock recorder for MockGlobalSettingsServiceServer.
type MockGlobalSettingsServiceServerMockRecorder struct {
	mock *MockGlobalSettingsServiceServer
}

// NewMockGlobalSettingsServiceServer creates a new mock instance.
func NewMockGlobalSettingsServiceServer(ctrl *gomock.Controller) *MockGlobalSettingsServiceServer {
	mock := &MockGlobalSettingsServiceServer{ctrl: ctrl}
	mock.recorder = &MockGlobalSettingsServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGlobalSettingsServiceServer) EXPECT() *MockGlobalSettingsServiceServerMockRecorder {
	return m.recorder
}

// SetGlobalSettings mocks base method.
func (m *MockGlobalSettingsServiceServer) SetGlobalSettings(arg0 context.Context, arg1 *settings.SetGlobalSettingsRequest) (*settings.SetGlobalSettingsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetGlobalSettings", arg0, arg1)
	ret0, _ := ret[0].(*settings.SetGlobalSettingsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetGlobalSettings indicates an expected call of SetGlobalSettings.
func (mr *MockGlobalSettingsServiceServerMockRecorder) SetGlobalSettings(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGlobalSettings", reflect.TypeOf((*MockGlobalSettingsServiceServer)(nil).SetGlobalSettings), arg0, arg1)
}

// mustEmbedUnimplementedGlobalSettingsServiceServer mocks base method.
func (m *MockGlobalSettingsServiceServer) mustEmbedUnimplementedGlobalSettingsServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedGlobalSettingsServiceServer")
}

// mustEmbedUnimplementedGlobalSettingsServiceServer indicates an expected call of mustEmbedUnimplementedGlobalSettingsServiceServer.
func (mr *MockGlobalSettingsServiceServerMockRecorder) mustEmbedUnimplementedGlobalSettingsServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedGlobalSettingsServiceServer", reflect.TypeOf((*MockGlobalSettingsServiceServer)(nil).mustEmbedUnimplementedGlobalSettingsServiceServer))
}

// MockUnsafeGlobalSettingsServiceServer is a mock of UnsafeGlobalSettingsServiceServer interface.
type MockUnsafeGlobalSettingsServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeGlobalSettingsServiceServerMockRecorder
	isgomock struct{}
}

// MockUnsafeGlobalSettingsServiceServerMockRecorder is the mock recorder for MockUnsafeGlobalSettingsServiceServer.
type MockUnsafeGlobalSettingsServiceServerMockRecorder struct {
	mock *MockUnsafeGlobalSettingsServiceServer
}

// NewMockUnsafeGlobalSettingsServiceServer creates a new mock instance.
func NewMockUnsafeGlobalSettingsServiceServer(ctrl *gomock.Controller) *MockUnsafeGlobalSettingsServiceServer {
	mock := &MockUnsafeGlobalSettingsServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeGlobalSettingsServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeGlobalSettingsServiceServer) EXPECT() *MockUnsafeGlobalSettingsServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedGlobalSettingsServiceServer mocks base method.
func (m *MockUnsafeGlobalSettingsServiceServer) mustEmbedUnimplementedGlobalSettingsServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedGlobalSettingsServiceServer")
}

// mustEmbedUnimplementedGlobalSettingsServiceServer indicates an expected call of mustEmbedUnimplementedGlobalSettingsServiceServer.
func (mr *MockUnsafeGlobalSettingsServiceServerMockRecorder) mustEmbedUnimplementedGlobalSettingsServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedGlobalSettingsServiceServer", reflect.TypeOf((*MockUnsafeGlobalSettingsServiceServer)(nil).mustEmbedUnimplementedGlobalSettingsServiceServer))
}
