// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: bricks/v1/settings/items.proto

package settings

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ItemParametersService_GetItemParameters_FullMethodName = "/bricks.v1.settings.ItemParametersService/GetItemParameters"
	ItemParametersService_SetItemParameters_FullMethodName = "/bricks.v1.settings.ItemParametersService/SetItemParameters"
)

// ItemParametersServiceClient is the client API for ItemParametersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ItemParametersServiceClient interface {
	GetItemParameters(ctx context.Context, in *GetItemParametersRequest, opts ...grpc.CallOption) (*GetItemParametersResponse, error)
	SetItemParameters(ctx context.Context, in *SetItemParametersRequest, opts ...grpc.CallOption) (*SetItemParametersResponse, error)
}

type itemParametersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewItemParametersServiceClient(cc grpc.ClientConnInterface) ItemParametersServiceClient {
	return &itemParametersServiceClient{cc}
}

func (c *itemParametersServiceClient) GetItemParameters(ctx context.Context, in *GetItemParametersRequest, opts ...grpc.CallOption) (*GetItemParametersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetItemParametersResponse)
	err := c.cc.Invoke(ctx, ItemParametersService_GetItemParameters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemParametersServiceClient) SetItemParameters(ctx context.Context, in *SetItemParametersRequest, opts ...grpc.CallOption) (*SetItemParametersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetItemParametersResponse)
	err := c.cc.Invoke(ctx, ItemParametersService_SetItemParameters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ItemParametersServiceServer is the server API for ItemParametersService service.
// All implementations must embed UnimplementedItemParametersServiceServer
// for forward compatibility.
type ItemParametersServiceServer interface {
	GetItemParameters(context.Context, *GetItemParametersRequest) (*GetItemParametersResponse, error)
	SetItemParameters(context.Context, *SetItemParametersRequest) (*SetItemParametersResponse, error)
	mustEmbedUnimplementedItemParametersServiceServer()
}

// UnimplementedItemParametersServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedItemParametersServiceServer struct{}

func (UnimplementedItemParametersServiceServer) GetItemParameters(context.Context, *GetItemParametersRequest) (*GetItemParametersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItemParameters not implemented")
}
func (UnimplementedItemParametersServiceServer) SetItemParameters(context.Context, *SetItemParametersRequest) (*SetItemParametersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetItemParameters not implemented")
}
func (UnimplementedItemParametersServiceServer) mustEmbedUnimplementedItemParametersServiceServer() {}
func (UnimplementedItemParametersServiceServer) testEmbeddedByValue()                               {}

// UnsafeItemParametersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ItemParametersServiceServer will
// result in compilation errors.
type UnsafeItemParametersServiceServer interface {
	mustEmbedUnimplementedItemParametersServiceServer()
}

func RegisterItemParametersServiceServer(s grpc.ServiceRegistrar, srv ItemParametersServiceServer) {
	// If the following call pancis, it indicates UnimplementedItemParametersServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ItemParametersService_ServiceDesc, srv)
}

func _ItemParametersService_GetItemParameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemParametersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemParametersServiceServer).GetItemParameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ItemParametersService_GetItemParameters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemParametersServiceServer).GetItemParameters(ctx, req.(*GetItemParametersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemParametersService_SetItemParameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetItemParametersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemParametersServiceServer).SetItemParameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ItemParametersService_SetItemParameters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemParametersServiceServer).SetItemParameters(ctx, req.(*SetItemParametersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ItemParametersService_ServiceDesc is the grpc.ServiceDesc for ItemParametersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ItemParametersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bricks.v1.settings.ItemParametersService",
	HandlerType: (*ItemParametersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetItemParameters",
			Handler:    _ItemParametersService_GetItemParameters_Handler,
		},
		{
			MethodName: "SetItemParameters",
			Handler:    _ItemParametersService_SetItemParameters_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bricks/v1/settings/items.proto",
}
