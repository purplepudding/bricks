// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: bricks/v1/settings/global.proto

package settings

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GlobalSettingsService_SetGlobalSettings_FullMethodName = "/bricks.v1.settings.GlobalSettingsService/SetGlobalSettings"
)

// GlobalSettingsServiceClient is the client API for GlobalSettingsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GlobalSettingsServiceClient interface {
	SetGlobalSettings(ctx context.Context, in *SetGlobalSettingsRequest, opts ...grpc.CallOption) (*SetGlobalSettingsResponse, error)
}

type globalSettingsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGlobalSettingsServiceClient(cc grpc.ClientConnInterface) GlobalSettingsServiceClient {
	return &globalSettingsServiceClient{cc}
}

func (c *globalSettingsServiceClient) SetGlobalSettings(ctx context.Context, in *SetGlobalSettingsRequest, opts ...grpc.CallOption) (*SetGlobalSettingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetGlobalSettingsResponse)
	err := c.cc.Invoke(ctx, GlobalSettingsService_SetGlobalSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GlobalSettingsServiceServer is the server API for GlobalSettingsService service.
// All implementations must embed UnimplementedGlobalSettingsServiceServer
// for forward compatibility.
type GlobalSettingsServiceServer interface {
	SetGlobalSettings(context.Context, *SetGlobalSettingsRequest) (*SetGlobalSettingsResponse, error)
	mustEmbedUnimplementedGlobalSettingsServiceServer()
}

// UnimplementedGlobalSettingsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGlobalSettingsServiceServer struct{}

func (UnimplementedGlobalSettingsServiceServer) SetGlobalSettings(context.Context, *SetGlobalSettingsRequest) (*SetGlobalSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGlobalSettings not implemented")
}
func (UnimplementedGlobalSettingsServiceServer) mustEmbedUnimplementedGlobalSettingsServiceServer() {}
func (UnimplementedGlobalSettingsServiceServer) testEmbeddedByValue()                               {}

// UnsafeGlobalSettingsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GlobalSettingsServiceServer will
// result in compilation errors.
type UnsafeGlobalSettingsServiceServer interface {
	mustEmbedUnimplementedGlobalSettingsServiceServer()
}

func RegisterGlobalSettingsServiceServer(s grpc.ServiceRegistrar, srv GlobalSettingsServiceServer) {
	// If the following call pancis, it indicates UnimplementedGlobalSettingsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GlobalSettingsService_ServiceDesc, srv)
}

func _GlobalSettingsService_SetGlobalSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGlobalSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalSettingsServiceServer).SetGlobalSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GlobalSettingsService_SetGlobalSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalSettingsServiceServer).SetGlobalSettings(ctx, req.(*SetGlobalSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GlobalSettingsService_ServiceDesc is the grpc.ServiceDesc for GlobalSettingsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GlobalSettingsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bricks.v1.settings.GlobalSettingsService",
	HandlerType: (*GlobalSettingsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetGlobalSettings",
			Handler:    _GlobalSettingsService_SetGlobalSettings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bricks/v1/settings/global.proto",
}
