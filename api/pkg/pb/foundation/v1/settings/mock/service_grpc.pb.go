// Code generated by MockGen. DO NOT EDIT.
// Source: settings/service_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source settings/service_grpc.pb.go -destination settings/mock/service_grpc.pb.go -package mocksettings
//

// Package mocksettings is a generated GoMock package.
package mocksettings

import (
	context "context"
	reflect "reflect"

	settings "github.com/purplepudding/foundation/api/pkg/pb/foundation/v1/settings"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockServiceSettingsServiceClient is a mock of ServiceSettingsServiceClient interface.
type MockServiceSettingsServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockServiceSettingsServiceClientMockRecorder
	isgomock struct{}
}

// MockServiceSettingsServiceClientMockRecorder is the mock recorder for MockServiceSettingsServiceClient.
type MockServiceSettingsServiceClientMockRecorder struct {
	mock *MockServiceSettingsServiceClient
}

// NewMockServiceSettingsServiceClient creates a new mock instance.
func NewMockServiceSettingsServiceClient(ctrl *gomock.Controller) *MockServiceSettingsServiceClient {
	mock := &MockServiceSettingsServiceClient{ctrl: ctrl}
	mock.recorder = &MockServiceSettingsServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceSettingsServiceClient) EXPECT() *MockServiceSettingsServiceClientMockRecorder {
	return m.recorder
}

// GetServiceSettings mocks base method.
func (m *MockServiceSettingsServiceClient) GetServiceSettings(ctx context.Context, in *settings.GetServiceSettingsRequest, opts ...grpc.CallOption) (*settings.GetServiceSettingsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetServiceSettings", varargs...)
	ret0, _ := ret[0].(*settings.GetServiceSettingsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceSettings indicates an expected call of GetServiceSettings.
func (mr *MockServiceSettingsServiceClientMockRecorder) GetServiceSettings(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceSettings", reflect.TypeOf((*MockServiceSettingsServiceClient)(nil).GetServiceSettings), varargs...)
}

// SetServiceSettings mocks base method.
func (m *MockServiceSettingsServiceClient) SetServiceSettings(ctx context.Context, in *settings.SetServiceSettingsRequest, opts ...grpc.CallOption) (*settings.SetServiceSettingsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetServiceSettings", varargs...)
	ret0, _ := ret[0].(*settings.SetServiceSettingsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetServiceSettings indicates an expected call of SetServiceSettings.
func (mr *MockServiceSettingsServiceClientMockRecorder) SetServiceSettings(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetServiceSettings", reflect.TypeOf((*MockServiceSettingsServiceClient)(nil).SetServiceSettings), varargs...)
}

// MockServiceSettingsServiceServer is a mock of ServiceSettingsServiceServer interface.
type MockServiceSettingsServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockServiceSettingsServiceServerMockRecorder
	isgomock struct{}
}

// MockServiceSettingsServiceServerMockRecorder is the mock recorder for MockServiceSettingsServiceServer.
type MockServiceSettingsServiceServerMockRecorder struct {
	mock *MockServiceSettingsServiceServer
}

// NewMockServiceSettingsServiceServer creates a new mock instance.
func NewMockServiceSettingsServiceServer(ctrl *gomock.Controller) *MockServiceSettingsServiceServer {
	mock := &MockServiceSettingsServiceServer{ctrl: ctrl}
	mock.recorder = &MockServiceSettingsServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceSettingsServiceServer) EXPECT() *MockServiceSettingsServiceServerMockRecorder {
	return m.recorder
}

// GetServiceSettings mocks base method.
func (m *MockServiceSettingsServiceServer) GetServiceSettings(arg0 context.Context, arg1 *settings.GetServiceSettingsRequest) (*settings.GetServiceSettingsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceSettings", arg0, arg1)
	ret0, _ := ret[0].(*settings.GetServiceSettingsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceSettings indicates an expected call of GetServiceSettings.
func (mr *MockServiceSettingsServiceServerMockRecorder) GetServiceSettings(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceSettings", reflect.TypeOf((*MockServiceSettingsServiceServer)(nil).GetServiceSettings), arg0, arg1)
}

// SetServiceSettings mocks base method.
func (m *MockServiceSettingsServiceServer) SetServiceSettings(arg0 context.Context, arg1 *settings.SetServiceSettingsRequest) (*settings.SetServiceSettingsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetServiceSettings", arg0, arg1)
	ret0, _ := ret[0].(*settings.SetServiceSettingsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetServiceSettings indicates an expected call of SetServiceSettings.
func (mr *MockServiceSettingsServiceServerMockRecorder) SetServiceSettings(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetServiceSettings", reflect.TypeOf((*MockServiceSettingsServiceServer)(nil).SetServiceSettings), arg0, arg1)
}

// mustEmbedUnimplementedServiceSettingsServiceServer mocks base method.
func (m *MockServiceSettingsServiceServer) mustEmbedUnimplementedServiceSettingsServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedServiceSettingsServiceServer")
}

// mustEmbedUnimplementedServiceSettingsServiceServer indicates an expected call of mustEmbedUnimplementedServiceSettingsServiceServer.
func (mr *MockServiceSettingsServiceServerMockRecorder) mustEmbedUnimplementedServiceSettingsServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedServiceSettingsServiceServer", reflect.TypeOf((*MockServiceSettingsServiceServer)(nil).mustEmbedUnimplementedServiceSettingsServiceServer))
}

// MockUnsafeServiceSettingsServiceServer is a mock of UnsafeServiceSettingsServiceServer interface.
type MockUnsafeServiceSettingsServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeServiceSettingsServiceServerMockRecorder
	isgomock struct{}
}

// MockUnsafeServiceSettingsServiceServerMockRecorder is the mock recorder for MockUnsafeServiceSettingsServiceServer.
type MockUnsafeServiceSettingsServiceServerMockRecorder struct {
	mock *MockUnsafeServiceSettingsServiceServer
}

// NewMockUnsafeServiceSettingsServiceServer creates a new mock instance.
func NewMockUnsafeServiceSettingsServiceServer(ctrl *gomock.Controller) *MockUnsafeServiceSettingsServiceServer {
	mock := &MockUnsafeServiceSettingsServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeServiceSettingsServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeServiceSettingsServiceServer) EXPECT() *MockUnsafeServiceSettingsServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedServiceSettingsServiceServer mocks base method.
func (m *MockUnsafeServiceSettingsServiceServer) mustEmbedUnimplementedServiceSettingsServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedServiceSettingsServiceServer")
}

// mustEmbedUnimplementedServiceSettingsServiceServer indicates an expected call of mustEmbedUnimplementedServiceSettingsServiceServer.
func (mr *MockUnsafeServiceSettingsServiceServerMockRecorder) mustEmbedUnimplementedServiceSettingsServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedServiceSettingsServiceServer", reflect.TypeOf((*MockUnsafeServiceSettingsServiceServer)(nil).mustEmbedUnimplementedServiceSettingsServiceServer))
}
