// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: foundation/v1/settings/service.proto

package settings

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ServiceSettingsService_GetServiceSettings_FullMethodName = "/foundation.v1.settings.ServiceSettingsService/GetServiceSettings"
	ServiceSettingsService_SetServiceSettings_FullMethodName = "/foundation.v1.settings.ServiceSettingsService/SetServiceSettings"
)

// ServiceSettingsServiceClient is the client API for ServiceSettingsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceSettingsServiceClient interface {
	GetServiceSettings(ctx context.Context, in *GetServiceSettingsRequest, opts ...grpc.CallOption) (*GetServiceSettingsResponse, error)
	SetServiceSettings(ctx context.Context, in *SetServiceSettingsRequest, opts ...grpc.CallOption) (*SetServiceSettingsResponse, error)
}

type serviceSettingsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceSettingsServiceClient(cc grpc.ClientConnInterface) ServiceSettingsServiceClient {
	return &serviceSettingsServiceClient{cc}
}

func (c *serviceSettingsServiceClient) GetServiceSettings(ctx context.Context, in *GetServiceSettingsRequest, opts ...grpc.CallOption) (*GetServiceSettingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetServiceSettingsResponse)
	err := c.cc.Invoke(ctx, ServiceSettingsService_GetServiceSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceSettingsServiceClient) SetServiceSettings(ctx context.Context, in *SetServiceSettingsRequest, opts ...grpc.CallOption) (*SetServiceSettingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetServiceSettingsResponse)
	err := c.cc.Invoke(ctx, ServiceSettingsService_SetServiceSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceSettingsServiceServer is the server API for ServiceSettingsService service.
// All implementations must embed UnimplementedServiceSettingsServiceServer
// for forward compatibility.
type ServiceSettingsServiceServer interface {
	GetServiceSettings(context.Context, *GetServiceSettingsRequest) (*GetServiceSettingsResponse, error)
	SetServiceSettings(context.Context, *SetServiceSettingsRequest) (*SetServiceSettingsResponse, error)
	mustEmbedUnimplementedServiceSettingsServiceServer()
}

// UnimplementedServiceSettingsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServiceSettingsServiceServer struct{}

func (UnimplementedServiceSettingsServiceServer) GetServiceSettings(context.Context, *GetServiceSettingsRequest) (*GetServiceSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceSettings not implemented")
}
func (UnimplementedServiceSettingsServiceServer) SetServiceSettings(context.Context, *SetServiceSettingsRequest) (*SetServiceSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetServiceSettings not implemented")
}
func (UnimplementedServiceSettingsServiceServer) mustEmbedUnimplementedServiceSettingsServiceServer() {
}
func (UnimplementedServiceSettingsServiceServer) testEmbeddedByValue() {}

// UnsafeServiceSettingsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceSettingsServiceServer will
// result in compilation errors.
type UnsafeServiceSettingsServiceServer interface {
	mustEmbedUnimplementedServiceSettingsServiceServer()
}

func RegisterServiceSettingsServiceServer(s grpc.ServiceRegistrar, srv ServiceSettingsServiceServer) {
	// If the following call pancis, it indicates UnimplementedServiceSettingsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ServiceSettingsService_ServiceDesc, srv)
}

func _ServiceSettingsService_GetServiceSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceSettingsServiceServer).GetServiceSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceSettingsService_GetServiceSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceSettingsServiceServer).GetServiceSettings(ctx, req.(*GetServiceSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceSettingsService_SetServiceSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetServiceSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceSettingsServiceServer).SetServiceSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceSettingsService_SetServiceSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceSettingsServiceServer).SetServiceSettings(ctx, req.(*SetServiceSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceSettingsService_ServiceDesc is the grpc.ServiceDesc for ServiceSettingsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceSettingsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "foundation.v1.settings.ServiceSettingsService",
	HandlerType: (*ServiceSettingsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetServiceSettings",
			Handler:    _ServiceSettingsService_GetServiceSettings_Handler,
		},
		{
			MethodName: "SetServiceSettings",
			Handler:    _ServiceSettingsService_SetServiceSettings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "foundation/v1/settings/service.proto",
}
