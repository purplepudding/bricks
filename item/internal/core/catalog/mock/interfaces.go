// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source interfaces.go -destination mock/interfaces.go -package mock_catalog
//

// Package mock_catalog is a generated GoMock package.
package mock_catalog

import (
	context "context"
	reflect "reflect"
	time "time"

	model "github.com/purplepudding/bricks/item/internal/core/model"
	gomock "go.uber.org/mock/gomock"
)

// MockItemPersistence is a mock of ItemPersistence interface.
type MockItemPersistence struct {
	ctrl     *gomock.Controller
	recorder *MockItemPersistenceMockRecorder
	isgomock struct{}
}

// MockItemPersistenceMockRecorder is the mock recorder for MockItemPersistence.
type MockItemPersistenceMockRecorder struct {
	mock *MockItemPersistence
}

// NewMockItemPersistence creates a new mock instance.
func NewMockItemPersistence(ctrl *gomock.Controller) *MockItemPersistence {
	mock := &MockItemPersistence{ctrl: ctrl}
	mock.recorder = &MockItemPersistenceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemPersistence) EXPECT() *MockItemPersistenceMockRecorder {
	return m.recorder
}

// GetByID mocks base method.
func (m *MockItemPersistence) GetByID(ctx context.Context, id string) (*model.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*model.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockItemPersistenceMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockItemPersistence)(nil).GetByID), ctx, id)
}

// ListAll mocks base method.
func (m *MockItemPersistence) ListAll(ctx context.Context) ([]*model.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAll", ctx)
	ret0, _ := ret[0].([]*model.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAll indicates an expected call of ListAll.
func (mr *MockItemPersistenceMockRecorder) ListAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*MockItemPersistence)(nil).ListAll), ctx)
}

// ListAvailableOn mocks base method.
func (m *MockItemPersistence) ListAvailableAt(ctx context.Context, date time.Time) ([]*model.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAvailableAt", ctx, date)
	ret0, _ := ret[0].([]*model.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAvailableOn indicates an expected call of ListAvailableOn.
func (mr *MockItemPersistenceMockRecorder) ListAvailableOn(ctx, date any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAvailableAt", reflect.TypeOf((*MockItemPersistence)(nil).ListAvailableAt), ctx, date)
}

// Update mocks base method.
func (m *MockItemPersistence) Update(ctx context.Context, item *model.Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, item)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockItemPersistenceMockRecorder) Update(ctx, item any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockItemPersistence)(nil).Update), ctx, item)
}
