// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source interfaces.go -destination mock/interfaces.go -package mock_grpcsvc
//

// Package mock_grpcsvc is a generated GoMock package.
package mock_grpcsvc

import (
	context "context"
	reflect "reflect"
	time "time"

	model "github.com/purplepudding/bricks/item/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockCatalogLogic is a mock of CatalogLogic interface.
type MockCatalogLogic struct {
	ctrl     *gomock.Controller
	recorder *MockCatalogLogicMockRecorder
	isgomock struct{}
}

// MockCatalogLogicMockRecorder is the mock recorder for MockCatalogLogic.
type MockCatalogLogicMockRecorder struct {
	mock *MockCatalogLogic
}

// NewMockCatalogLogic creates a new mock instance.
func NewMockCatalogLogic(ctrl *gomock.Controller) *MockCatalogLogic {
	mock := &MockCatalogLogic{ctrl: ctrl}
	mock.recorder = &MockCatalogLogicMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCatalogLogic) EXPECT() *MockCatalogLogicMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockCatalogLogic) Get(ctx context.Context, id string) (*model.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*model.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCatalogLogicMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCatalogLogic)(nil).Get), ctx, id)
}

// List mocks base method.
func (m *MockCatalogLogic) List(ctx context.Context) ([]*model.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]*model.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockCatalogLogicMockRecorder) List(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCatalogLogic)(nil).List), ctx)
}

// ListAvailable mocks base method.
func (m *MockCatalogLogic) ListAvailable(ctx context.Context, timestampOverride *time.Time) ([]*model.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAvailable", ctx, timestampOverride)
	ret0, _ := ret[0].([]*model.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAvailable indicates an expected call of ListAvailable.
func (mr *MockCatalogLogicMockRecorder) ListAvailable(ctx, timestampOverride any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAvailable", reflect.TypeOf((*MockCatalogLogic)(nil).ListAvailable), ctx, timestampOverride)
}

// UpdateItem mocks base method.
func (m *MockCatalogLogic) UpdateItem(ctx context.Context, item *model.Item) (*model.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateItem", ctx, item)
	ret0, _ := ret[0].(*model.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateItem indicates an expected call of UpdateItem.
func (mr *MockCatalogLogicMockRecorder) UpdateItem(ctx, item any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItem", reflect.TypeOf((*MockCatalogLogic)(nil).UpdateItem), ctx, item)
}
